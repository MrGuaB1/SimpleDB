package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {  //Join 运算符实现关系连接操作。

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     *            要加入的左（外）关系的迭代器
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    
    private JoinPredicate pred;
    private OpIterator child1,child2;
    
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        	this.pred=p;
        	this.child1=child1;
        	this.child2=child2;
    }

    public JoinPredicate getJoinPredicate() {
        	return this.pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    	return this.child1.getTupleDesc().getFieldName(pred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return this.child1.getTupleDesc().getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() { //使用TupleDesc类中的静态方法
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    	super.open();
    	child1.open();
    	child2.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
    //返回连接生成的下一个元组，如果没有更多元组则返回null
    //从逻辑上讲，这是 r1 交叉 r2 中满足连接谓词的下一个元组
    //有许多可能的实现；最简单的是嵌套循环连接
    //请注意，从 Join 的这个特定实现返回的元组只是从左右关系连接元组的串联
    //因此，如果使用相等谓词，结果中将有两个 join 属性副本。
    //（如果需要，可以使用额外的投影运算符删除此类重复列）
    //例如，如果一个元组是 {1,2,3}，另一个元组是 {1,5,6}，根据第一列的相等性连接，则返回 {1,2,3,1,5,6}.
    
    //实际上就是一个类似找笛卡尔积的情况，要在每个t1和t2之间建立映射
    //为了保证能找到所有的结果，t1应放在外面
    
    private Tuple t1;
    
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	
    	
        while(child1.hasNext()||t1!=null) { //关系1未遍历完或者此时t1不为空，算法就没结束
        	if(child1.hasNext()&&t1==null)
        		t1=child1.next();
        	
        	
        	while(child2.hasNext()&&t1!=null) {
        		Tuple t2=child2.next();
        		if(this.pred.filter(t1, t2)) {
        			
        			Tuple union=new Tuple(this.getTupleDesc());
        			int i=0;
        			for(;i<t1.data_size();i++)
        				union.setField(i,t1.data.get(i));
        			for(int j=0;j<t2.data_size();j++)
        				union.setField(i+j,t2.data.get(j));
        			return union;
    			}
        		
        		
    		}
        	
        	
        	t1=null;
        	child2.rewind(); //要找到所有的关系，对于每一个t1，都要完整的遍历一次t2
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() { //用于查询计划树
        return new OpIterator[] {child1,child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
       child1=children[0];
       child2=children[1];
    }

}
